"""
Test suite for the API Key CLI tool.

Tests the command-line interface for API key management including:
- Command parsing and validation
- Database operations
- Output formatting
- Error handling
- Interactive confirmation prompts
"""

from datetime import datetime
import json
from pathlib import Path
import sys
from unittest.mock import AsyncMock, MagicMock, patch

from click.testing import CliRunner
import pytest

sys.path.insert(0, str(Path(__file__).parent.parent))

from scripts.api_key_cli import APIKeyCLI, main


class TestAPIKeyCLI:
    """Test suite for API Key CLI application class."""

    def test_format_key_display(self):
        """Test formatting API key for display."""
        cli = APIKeyCLI()

        # Test full key display
        key = "sk-1234567890abcdef1234567890abcdef"
        # The API always masks keys for security
        # Test with a proper length key

        # Test masked key display
        masked = cli.format_key_display(key)
        assert masked.startswith("sk-12345...")
        assert masked.endswith("...cdef")
        assert len(masked) < len(key)

    def test_format_datetime(self):
        """Test datetime formatting."""
        cli = APIKeyCLI()

        # Test with datetime
        dt = datetime(2024, 1, 15, 10, 30, 45)
        formatted = cli.format_datetime(dt)
        assert "2024-01-15" in formatted
        assert "10:30:45" in formatted

        # Test with None
        assert cli.format_datetime(None) == "Never"

    def test_format_usage_stats(self):
        """Test usage statistics formatting."""
        cli = APIKeyCLI()

        # Create mock API key
        api_key = MagicMock()
        api_key.total_requests = 100
        api_key.total_patients_generated = 5000
        api_key.daily_requests = 50
        api_key.last_used_at = datetime(2024, 1, 15, 10, 30, 45)
        api_key.last_reset_at = datetime(2024, 1, 15, 0, 0, 0)

        stats = cli.format_usage_stats(api_key)
        assert stats["total_requests"] == 100
        assert stats["total_patients"] == 5000
        assert stats["daily_requests"] == 50
        assert "2024-01-15" in stats["last_used"]

    def test_format_limits(self):
        """Test rate limit formatting."""
        cli = APIKeyCLI()

        # Create mock API key with limits
        api_key = MagicMock()
        api_key.max_patients_per_request = 1000
        api_key.max_requests_per_day = 100
        api_key.max_requests_per_hour = 50
        api_key.max_requests_per_minute = 10

        limits = cli.format_limits(api_key)
        assert limits["patients_per_request"] == 1000
        assert limits["requests_per_day"] == 100
        assert limits["requests_per_hour"] == 50
        assert limits["requests_per_minute"] == 10


class TestCLICommands:
    """Test suite for CLI commands."""

    @pytest.fixture
    def runner(self):
        """Create a CLI test runner."""
        return CliRunner()

    @pytest.fixture
    def mock_api_key(self):
        """Create a mock API key for testing."""
        api_key = MagicMock()
        api_key.id = "12345678-1234-1234-1234-123456789012"
        api_key.key = "sk-test1234567890abcdef1234567890ab"
        api_key.name = "Test Key"
        api_key.email = "test@example.com"
        api_key.is_active = True
        api_key.is_demo = False
        api_key.created_at = datetime(2024, 1, 1)
        api_key.expires_at = None
        api_key.last_used_at = datetime(2024, 1, 15)
        api_key.total_requests = 100
        api_key.total_patients_generated = 5000
        api_key.daily_requests = 10
        api_key.daily_patients = 500
        api_key.max_patients_per_request = 1000
        api_key.max_requests_per_day = 100
        api_key.max_requests_per_hour = 50
        api_key.max_requests_per_minute = 10
        api_key.daily_reset_at = datetime(2024, 1, 16)
        api_key.last_reset_at = datetime(2024, 1, 15)
        api_key.updated_at = datetime(2024, 1, 1)
        api_key.key_metadata = {}
        api_key.get_usage_summary = MagicMock(
            return_value={
                "total_requests": 100,
                "total_patients": 5000,
                "daily_requests": 10,
                "daily_patients": 500,
                "last_used_at": datetime(2024, 1, 15),
            }
        )
        return api_key

    def test_create_command_success(self, runner, mock_api_key):
        """Test successful API key creation."""
        # Setup mocks for async context manager
        mock_session = MagicMock()
        mock_session_factory = MagicMock()
        mock_session_factory.return_value.__aenter__ = AsyncMock(return_value=mock_session)
        mock_session_factory.return_value.__aexit__ = AsyncMock(return_value=None)
        
        # Mock repository with async method
        mock_repository = MagicMock()
        mock_repository.create_api_key = AsyncMock(return_value=mock_api_key)

        # Capture console output
        captured_output = []
        def mock_print_json(data):
            captured_output.append(data)

        # Apply patches with proper async mocks
        with patch("scripts.api_key_cli.cli_app.initialize", new_callable=AsyncMock), \
             patch("scripts.api_key_cli.cli_app.cleanup", new_callable=AsyncMock), \
             patch("scripts.api_key_cli.cli_app.session_factory", mock_session_factory), \
             patch("scripts.api_key_cli.APIKeyRepository", return_value=mock_repository), \
             patch("scripts.api_key_cli.console.print_json", side_effect=mock_print_json):

            # Run command
            result = runner.invoke(
                main,
                ["create", "--name", "Test Key", "--email", "test@example.com", "--format", "json"],
            )

            # Assert result
            assert result.exit_code == 0, f"Command failed with: {result.exception}\nOutput: {result.output}"
            assert len(captured_output) > 0, f"No output captured. Result output: {result.output}"
            # The data is already a JSON string since the code uses json.dumps() before print_json()
            output_data = json.loads(captured_output[0]) if isinstance(captured_output[0], str) else captured_output[0]
            assert output_data["name"] == "Test Key"
            assert output_data["email"] == "test@example.com"
            assert "key" in output_data

    def test_list_command_success(self, runner, mock_api_key):
        """Test successful API key listing."""
        # Setup mocks for async context manager
        mock_session = MagicMock()
        mock_session_factory = MagicMock()
        mock_session_factory.return_value.__aenter__ = AsyncMock(return_value=mock_session)
        mock_session_factory.return_value.__aexit__ = AsyncMock(return_value=None)
        
        # Mock repository with async methods
        mock_repository = MagicMock()
        mock_repository.list_keys = AsyncMock(return_value=[mock_api_key])

        # Capture console output
        captured_output = []
        def mock_print_json(data):
            captured_output.append(data)

        # Apply patches with proper async mocks
        with patch("scripts.api_key_cli.cli_app.initialize", new_callable=AsyncMock), \
             patch("scripts.api_key_cli.cli_app.cleanup", new_callable=AsyncMock), \
             patch("scripts.api_key_cli.cli_app.session_factory", mock_session_factory), \
             patch("scripts.api_key_cli.APIKeyRepository", return_value=mock_repository), \
             patch("scripts.api_key_cli.console.print_json", side_effect=mock_print_json):

            # Run command
            result = runner.invoke(main, ["list", "--format", "json"])

            # Assert result
            assert result.exit_code == 0
            assert len(captured_output) > 0, "No output captured"
            # The data is already a JSON string since the code uses json.dumps() before print_json()
            output_data = json.loads(captured_output[0]) if isinstance(captured_output[0], str) else captured_output[0]
            assert len(output_data) == 1
            assert output_data[0]["name"] == "Test Key"

    def test_show_command_success(self, runner, mock_api_key):
        """Test successful API key details display."""
        # Setup mocks
        mock_session = MagicMock()
        mock_session_factory = MagicMock()
        mock_session_factory.return_value.__aenter__ = AsyncMock(return_value=mock_session)
        mock_session_factory.return_value.__aexit__ = AsyncMock(return_value=None)
        
        mock_repository = MagicMock()
        mock_repository.get_by_id = AsyncMock(return_value=mock_api_key)

        # Capture console output
        captured_output = []
        def mock_print_json(data):
            captured_output.append(data)

        with patch("scripts.api_key_cli.cli_app.initialize", new_callable=AsyncMock), \
             patch("scripts.api_key_cli.cli_app.cleanup", new_callable=AsyncMock), \
             patch("scripts.api_key_cli.cli_app.session_factory", mock_session_factory), \
             patch("scripts.api_key_cli.APIKeyRepository", return_value=mock_repository), \
             patch("scripts.api_key_cli.console.print_json", side_effect=mock_print_json):

            result = runner.invoke(main, ["show", "12345678-1234-1234-1234-123456789012", "--format", "json"])

            assert result.exit_code == 0
            assert len(captured_output) > 0, "No output captured"
            # The data is already a JSON string since the code uses json.dumps() before print_json()
            output_data = json.loads(captured_output[0]) if isinstance(captured_output[0], str) else captured_output[0]
            assert output_data["name"] == "Test Key"
            assert output_data["is_active"] == True
            assert "usage" in output_data
            assert "limits" in output_data


class TestCLIErrorHandling:
    """Test suite for CLI error handling scenarios."""

    @pytest.fixture
    def runner(self):
        """Create Click test runner."""
        return CliRunner()

    def test_database_connection_error(self, runner):
        """Test CLI behavior when database connection fails."""
        with patch("scripts.api_key_cli.cli_app.initialize", new_callable=AsyncMock) as mock_initialize:
            mock_initialize.side_effect = Exception("Database connection failed")
            
            result = runner.invoke(main, ["list"])
            
            assert result.exit_code == 1
            assert "Error listing API keys" in result.output

    def test_repository_error_handling(self, runner):
        """Test CLI behavior when repository operations fail."""
        mock_session = MagicMock()
        mock_session_factory = MagicMock()
        mock_session_factory.return_value.__aenter__ = AsyncMock(return_value=mock_session)
        mock_session_factory.return_value.__aexit__ = AsyncMock(return_value=None)
        
        mock_repository = MagicMock()
        mock_repository.list_keys = AsyncMock(side_effect=Exception("Database error"))

        with patch("scripts.api_key_cli.cli_app.initialize", new_callable=AsyncMock), \
             patch("scripts.api_key_cli.cli_app.cleanup", new_callable=AsyncMock), \
             patch("scripts.api_key_cli.cli_app.session_factory", mock_session_factory), \
             patch("scripts.api_key_cli.APIKeyRepository", return_value=mock_repository):
            
            result = runner.invoke(main, ["list"])
            
            assert result.exit_code == 1
            assert "Error listing API keys" in result.output
