services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    volumes:
      - ./:/app
    environment:
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONUNBUFFERED=1
      - PORT=8000
      - HOST=0.0.0.0
      - PATIENT_GENERATOR_THREADS=4
      - PATIENT_GENERATOR_MAX_MEMORY=2048
      - DATABASE_URL=postgresql://medgen_user:medgen_password@db:5432/medgen_db
      - DB_TYPE=postgres
      - API_KEY=${API_KEY:-DEMO_MILMED_2025_50_PATIENTS}
      - DEBUG=${DEBUG:-True}
      - CORS_ORIGINS=${CORS_ORIGINS:-http://localhost:3000,http://localhost:8000}
      - REDIS_URL=redis://redis:6379/0
      - CACHE_TTL=${CACHE_TTL:-3600}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    restart: "on-failure"
    # Run migrations and ensure demo key before starting the app
    command: >
      sh -c "
      alembic upgrade head &&
      python scripts/ensure_demo_key.py &&
      uvicorn src.main:app --reload --host 0.0.0.0 --port 8000
      "

  db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_USER=medgen_user
      - POSTGRES_PASSWORD=medgen_password # Use .env file or secrets in production
      - POSTGRES_DB=medgen_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432" # Optional: expose for direct access
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U medgen_user -d medgen_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: "unless-stopped"

  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: "unless-stopped"
    command: redis-server --appendonly yes

volumes:
  postgres_data:
  redis_data:
