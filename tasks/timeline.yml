version: '3'

# Timeline Viewer Module
# Manages React-based patient timeline visualization component

vars:
  TIMELINE_DIR: patient-timeline-viewer
  TIMELINE_PORT: 5174
  NODE_CMD:
    sh: |
      if command -v node >/dev/null 2>&1; then
        echo "node"
      else
        echo "‚ùå Node.js not found. Please install Node.js from https://nodejs.org/"
        exit 1
      fi
  NPM_CMD:
    sh: |
      if command -v npm >/dev/null 2>&1; then
        echo "npm"
      else
        echo "‚ùå npm not found. Please install Node.js from https://nodejs.org/"
        exit 1
      fi

tasks:
  # Main development commands
  dev:
    desc: Start React timeline viewer in development mode
    aliases: [viewer, start]
    cmds:
      - echo "üöÄ Starting React timeline viewer (port {{.TIMELINE_PORT}})..."
      - task: check-deps
      - echo "üìä Timeline viewer will be available at http://localhost:{{.TIMELINE_PORT}}"
      - cd {{.TIMELINE_DIR}} && {{.NPM_CMD}} run dev

  build:
    desc: Build timeline viewer for production
    cmds:
      - echo "üèóÔ∏è  Building timeline viewer for production..."
      - task: check-deps
      - task: check-env
      - cd {{.TIMELINE_DIR}} && {{.NPM_CMD}} run build
      - echo "‚úÖ Timeline viewer built successfully"
      - echo "üìÅ Build output available in {{.TIMELINE_DIR}}/dist/"

  preview:
    desc: Preview production build of timeline viewer
    cmds:
      - echo "üëÄ Starting timeline viewer preview..."
      - task: build
      - cd {{.TIMELINE_DIR}} && {{.NPM_CMD}} run preview

  # Development and testing
  lint:
    desc: Run ESLint on timeline viewer code
    cmds:
      - echo "üîç Running ESLint on timeline viewer..."
      - task: check-deps
      - cd {{.TIMELINE_DIR}} && {{.NPM_CMD}} run lint

  test:
    desc: Test timeline viewer (build test)
    cmds:
      - echo "üß™ Testing timeline viewer..."
      - task: check-deps
      - echo "Running build test..."
      - cd {{.TIMELINE_DIR}} && {{.NPM_CMD}} run build
      - echo "‚úÖ Timeline viewer test completed"

  # Dependency management
  install:
    desc: Install timeline viewer dependencies
    aliases: [deps]
    cmds:
      - echo "üì¶ Installing timeline viewer dependencies..."
      - task: check-env
      - cd {{.TIMELINE_DIR}} && {{.NPM_CMD}} install
      - echo "‚úÖ Timeline viewer dependencies installed"

  update:
    desc: Update timeline viewer dependencies
    cmds:
      - echo "‚¨ÜÔ∏è  Updating timeline viewer dependencies..."
      - task: check-env
      - cd {{.TIMELINE_DIR}} && {{.NPM_CMD}} update
      - echo "‚úÖ Timeline viewer dependencies updated"

  # Cleanup commands
  clean:
    desc: Clean timeline viewer build files and cache
    cmds:
      - echo "üßπ Cleaning timeline viewer build files..."
      - rm -rf {{.TIMELINE_DIR}}/dist 2>/dev/null || true
      - rm -rf {{.TIMELINE_DIR}}/node_modules/.cache 2>/dev/null || true
      - echo "‚úÖ Timeline viewer cleaned"

  clean-deps:
    desc: Remove timeline viewer node_modules and reinstall
    cmds:
      - echo "üßπ Removing timeline viewer dependencies..."
      - rm -rf {{.TIMELINE_DIR}}/node_modules 2>/dev/null || true
      - rm -rf {{.TIMELINE_DIR}}/package-lock.json 2>/dev/null || true
      - echo "üì¶ Reinstalling timeline viewer dependencies..."
      - task: install

  # Full stack development
  full-dev:
    desc: Start both backend and timeline viewer (parallel)
    cmds:
      - echo "üöÄ Starting full development environment..."
      - echo "üìä Backend - http://localhost:8000"
      - echo "üìà Timeline Viewer - http://localhost:{{.TIMELINE_PORT}}"
      - echo "Starting services..."
      - task: :docker:services
      - echo "Starting backend..."
      - task: :development:dev &
      - sleep 3
      - echo "Starting timeline viewer..."
      - task: dev

  # Utility tasks
  check-env:
    desc: Check if timeline viewer environment is ready
    silent: true
    cmds:
      - |
        # Check if timeline directory exists
        if [ ! -d "{{.TIMELINE_DIR}}" ]; then
          echo "‚ùå Timeline viewer directory not found: {{.TIMELINE_DIR}}"
          exit 1
        fi
        
        # Check if package.json exists
        if [ ! -f "{{.TIMELINE_DIR}}/package.json" ]; then
          echo "‚ùå Timeline viewer package.json not found"
          exit 1
        fi

  check-deps:
    desc: Check if timeline viewer dependencies are installed
    silent: true
    cmds:
      - task: check-env
      - |
        # Check if node_modules exists
        if [ ! -d "{{.TIMELINE_DIR}}/node_modules" ]; then
          echo "üì¶ Timeline viewer dependencies not found. Installing..."
          task timeline:install
        fi

  status:
    desc: Show timeline viewer environment status
    cmds:
      - echo "üìä Timeline Viewer Status:"
      - echo "  Directory - {{.TIMELINE_DIR}}"
      - echo "  Port - {{.TIMELINE_PORT}}"
      - |
        if [ -d "{{.TIMELINE_DIR}}" ]; then
          echo "  ‚úÖ Directory exists"
        else
          echo "  ‚ùå Directory missing"
        fi
      - |
        if [ -f "{{.TIMELINE_DIR}}/package.json" ]; then
          echo "  ‚úÖ Package.json found"
        else
          echo "  ‚ùå Package.json missing"
        fi
      - |
        if [ -d "{{.TIMELINE_DIR}}/node_modules" ]; then
          echo "  ‚úÖ Dependencies installed"
        else
          echo "  ‚ùå Dependencies missing"
        fi
      - |
        if [ -d "{{.TIMELINE_DIR}}/dist" ]; then
          echo "  ‚úÖ Production build exists"
        else
          echo "  ‚ö†Ô∏è  No production build"
        fi

  info:
    desc: Display timeline viewer project information
    cmds:
      - echo "üìà Patient Timeline Viewer"
      - echo ""
      - echo "üîß Technology Stack:"
      - echo "  ‚Ä¢ React 18 with TypeScript"
      - echo "  ‚Ä¢ Vite build system"
      - echo "  ‚Ä¢ Tailwind CSS styling"
      - echo "  ‚Ä¢ Framer Motion animations"
      - echo ""
      - echo "üìÅ Project Structure:"
      - echo "  ‚Ä¢ {{.TIMELINE_DIR}}/src/components/ - React components"
      - echo "  ‚Ä¢ {{.TIMELINE_DIR}}/src/types/ - TypeScript definitions"
      - echo "  ‚Ä¢ {{.TIMELINE_DIR}}/src/utils/ - Timeline engine logic"
      - echo "  ‚Ä¢ {{.TIMELINE_DIR}}/public/ - Static assets"
      - echo ""
      - echo "üåê Available Commands:"
      - echo "  ‚Ä¢ task timeline:dev - Start development server"
      - echo "  ‚Ä¢ task timeline:build - Build for production"
      - echo "  ‚Ä¢ task timeline:preview - Preview production build"
      - echo "  ‚Ä¢ task timeline:full-dev - Start backend + timeline"