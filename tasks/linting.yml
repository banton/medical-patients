version: '3'

# Code Quality and Linting Module
# Handles code linting, formatting, and quality checks

tasks:
  all:
    desc: Run all linting and formatting checks
    aliases: [check]
    cmds:
      - echo "🔍 Running all code quality checks..."
      - task: python
      - task: javascript
      - echo "✅ All linting checks completed"

  python:
    desc: Run Python linting and type checking
    cmds:
      - echo "🐍 Running Python linting..."
      - task: check-python-tools
      - task: ruff-check
      - task: mypy-check
      - echo "✅ Python linting completed"

  javascript:
    desc: Run JavaScript/CSS linting
    cmds:
      - echo "📄 Running JavaScript/CSS linting..."
      - task: check-node-tools
      - npm run lint:check || true
      - echo "✅ JavaScript linting completed"

  # Python linting
  ruff:
    desc: Run Ruff linting on Python code
    aliases: [ruff-check]
    cmds:
      - echo "🔍 Running Ruff linting..."
      - task: check-ruff
      - ruff check src/ patient_generator/ {{.CLI_ARGS}}

  ruff-fix:
    desc: Auto-fix Ruff linting issues
    cmds:
      - echo "🔧 Auto-fixing Ruff issues..."
      - task: check-ruff
      - ruff check src/ patient_generator/ --fix {{.CLI_ARGS}}
      - echo "✅ Ruff fixes applied"

  mypy:
    desc: Run mypy type checking
    aliases: [mypy-check]
    cmds:
      - echo "🔍 Running mypy type checking..."
      - task: check-mypy
      - mypy src/ patient_generator/ --ignore-missing-imports {{.CLI_ARGS}}

  # Python formatting
  format-python:
    desc: Format Python code with Ruff
    aliases: [format-py]
    cmds:
      - echo "✨ Formatting Python code..."
      - task: check-ruff
      - ruff format src/ patient_generator/ {{.CLI_ARGS}}
      - echo "✅ Python code formatted"

  # JavaScript/CSS formatting
  format-javascript:
    desc: Format JavaScript/CSS/HTML with Prettier
    aliases: [format-js]
    cmds:
      - echo "✨ Formatting JavaScript/CSS/HTML..."
      - task: check-node-tools
      - npm run format
      - echo "✅ JavaScript/CSS/HTML formatted"

  format-check-javascript:
    desc: Check JavaScript/CSS/HTML formatting
    cmds:
      - echo "🔍 Checking JavaScript/CSS/HTML formatting..."
      - task: check-node-tools
      - npm run format:check

  # Combined formatting
  format:
    desc: Format all code (Python + JavaScript/CSS/HTML)
    aliases: [fmt]
    cmds:
      - echo "✨ Formatting all code..."
      - task: format-python
      - task: format-javascript
      - echo "✅ All code formatted"

  format-check:
    desc: Check formatting for all code
    cmds:
      - echo "🔍 Checking formatting for all code..."
      - task: check-python-tools
      - task: check-node-tools
      - echo "Checking Python formatting..."
      - ruff format src/ patient_generator/ --check {{.CLI_ARGS}}
      - echo "Checking JavaScript formatting..."
      - npm run format:check
      - echo "✅ All formatting checks passed"

  # CI/CD specific tasks
  ci:
    desc: Run all linting checks for CI/CD (strict mode)
    cmds:
      - echo "🚀 Running CI linting checks..."
      - task: check-python-tools
      - task: check-node-tools
      - echo "Running Ruff (strict mode)..."
      - ruff check src/ patient_generator/ --exit-non-zero-on-fix
      - echo "Running mypy..."
      - mypy src/ patient_generator/ --ignore-missing-imports
      - echo "Running JavaScript lint..."
      - npm run lint:check
      - echo "Running JavaScript format check..."
      - npm run format:check
      - echo "✅ All CI checks passed"

  # Pre-commit hooks
  pre-commit-install:
    desc: Install pre-commit hooks
    cmds:
      - echo "🪝 Installing pre-commit hooks..."
      - task: check-precommit
      - pre-commit install
      - echo "✅ Pre-commit hooks installed"

  pre-commit-run:
    desc: Run pre-commit on all files
    cmds:
      - echo "🪝 Running pre-commit on all files..."
      - task: check-precommit
      - pre-commit run --all-files
      - echo "✅ Pre-commit checks completed"

  pre-commit-update:
    desc: Update pre-commit hooks
    cmds:
      - echo "📦 Updating pre-commit hooks..."
      - task: check-precommit
      - pre-commit autoupdate
      - echo "✅ Pre-commit hooks updated"

  # Tool installation
  install-tools:
    desc: Install all linting and formatting tools
    cmds:
      - echo "📦 Installing linting and formatting tools..."
      - echo "Installing Python tools..."
      - pip install ruff mypy types-requests
      - echo "Installing JavaScript tools..."
      - npm install
      - echo "Installing pre-commit..."
      - pip install pre-commit
      - task: pre-commit-install
      - echo "✅ All tools installed"

  # Security and vulnerability checking
  safety:
    desc: Check Python dependencies for security vulnerabilities
    cmds:
      - echo "🔒 Checking Python dependencies for vulnerabilities..."
      - |
        if command -v safety >/dev/null 2>&1; then
          safety check
        else
          echo "⚠️  Safety not installed. Install with: pip install safety"
        fi

  bandit:
    desc: Run Bandit security linter on Python code
    cmds:
      - echo "🔒 Running Bandit security analysis..."
      - |
        if command -v bandit >/dev/null 2>&1; then
          bandit -r src/ patient_generator/ -f json -o bandit-report.json || true
          bandit -r src/ patient_generator/
        else
          echo "⚠️  Bandit not installed. Install with: pip install bandit"
        fi

  audit:
    desc: Run security audit on all dependencies
    cmds:
      - echo "🔒 Running security audit..."
      - task: safety
      - task: bandit
      - task: check-node-tools
      - npm audit || true
      - echo "✅ Security audit completed"

  # Code complexity and quality metrics
  complexity:
    desc: Check code complexity with radon
    cmds:
      - echo "📊 Checking code complexity..."
      - |
        if command -v radon >/dev/null 2>&1; then
          echo "Cyclomatic complexity:"
          radon cc src/ patient_generator/ -a -nc
          echo ""
          echo "Maintainability index:"
          radon mi src/ patient_generator/ -nc
        else
          echo "⚠️  Radon not installed. Install with: pip install radon"
        fi

  # Specific file/directory linting
  file:
    desc: Run linting on specific file or directory
    cmds:
      - echo "🎯 Running linting on {{.CLI_ARGS}}..."
      - |
        if [ -z "{{.CLI_ARGS}}" ]; then
          echo "❌ Please specify file or directory: task lint:file -- path/to/file"
          exit 1
        fi
        
        FILE="{{.CLI_ARGS}}"
        if [[ "$FILE" == *.py ]]; then
          echo "Python file detected"
          ruff check "$FILE"
          mypy "$FILE" --ignore-missing-imports || true
        elif [[ "$FILE" == *.js ]] || [[ "$FILE" == *.ts ]] || [[ "$FILE" == *.jsx ]] || [[ "$FILE" == *.tsx ]]; then
          echo "JavaScript/TypeScript file detected"
          npm run lint:check -- "$FILE" || true
        else
          echo "Running general checks on: $FILE"
          if [ -d "$FILE" ]; then
            ruff check "$FILE" || true
            npm run lint:check || true
          fi
        fi

  # Watch mode
  watch:
    desc: Watch for changes and run linting automatically
    cmds:
      - echo "👀 Watching for changes to run linting..."
      - |
        if command -v watchmedo >/dev/null 2>&1; then
          watchmedo auto-restart -d src -d patient_generator -d static/js -p "*.py;*.js;*.ts;*.tsx;*.jsx" -- task lint:all
        else
          echo "❌ watchdog not found. Install with: pip install watchdog"
          exit 1
        fi

  # Fix all issues automatically
  fix:
    desc: Auto-fix all linting and formatting issues
    cmds:
      - echo "🔧 Auto-fixing all issues..."
      - task: ruff-fix
      - task: format
      - echo "✅ All auto-fixes applied"

  # Quality report
  report:
    desc: Generate comprehensive code quality report
    cmds:
      - echo "📊 Generating code quality report..."
      - task: check-python-tools
      - |
        echo "=== CODE QUALITY REPORT ===" > quality-report.txt
        echo "Generated: $(date)" >> quality-report.txt
        echo "" >> quality-report.txt
        
        echo "=== RUFF LINTING ===" >> quality-report.txt
        ruff check src/ patient_generator/ >> quality-report.txt 2>&1 || true
        echo "" >> quality-report.txt
        
        echo "=== MYPY TYPE CHECKING ===" >> quality-report.txt
        mypy src/ patient_generator/ --ignore-missing-imports >> quality-report.txt 2>&1 || true
        echo "" >> quality-report.txt
        
        if command -v radon >/dev/null 2>&1; then
          echo "=== CODE COMPLEXITY ===" >> quality-report.txt
          radon cc src/ patient_generator/ -a >> quality-report.txt 2>&1 || true
          echo "" >> quality-report.txt
          
          echo "=== MAINTAINABILITY INDEX ===" >> quality-report.txt
          radon mi src/ patient_generator/ >> quality-report.txt 2>&1 || true
        fi
        
        echo "📄 Quality report saved to quality-report.txt"

  # Utility checks
  check-python-tools:
    desc: Check if Python linting tools are available
    silent: true
    cmds:
      - task: check-ruff
      - task: check-mypy

  check-ruff:
    desc: Check if Ruff is available
    silent: true
    cmds:
      - |
        if ! command -v ruff >/dev/null 2>&1; then
          echo "❌ Ruff not found. Please install: pip install ruff"
          exit 1
        fi

  check-mypy:
    desc: Check if mypy is available
    silent: true
    cmds:
      - |
        if ! command -v mypy >/dev/null 2>&1; then
          echo "❌ mypy not found. Please install: pip install mypy"
          exit 1
        fi

  check-precommit:
    desc: Check if pre-commit is available
    silent: true
    cmds:
      - |
        if ! command -v pre-commit >/dev/null 2>&1; then
          echo "❌ pre-commit not found. Please install: pip install pre-commit"
          exit 1
        fi

  check-node-tools:
    desc: Check if Node.js tools are available
    silent: true
    cmds:
      - |
        if ! command -v npm >/dev/null 2>&1; then
          echo "❌ npm not found. Please install Node.js and npm"
          exit 1
        fi
        
        if [ ! -f "package.json" ]; then
          echo "❌ package.json not found"
          exit 1
        fi

  # Clean up
  clean:
    desc: Clean linting artifacts and reports
    cmds:
      - echo "🧹 Cleaning linting artifacts..."
      - rm -f quality-report.txt bandit-report.json 2>/dev/null || true
      - rm -rf .mypy_cache 2>/dev/null || true
      - rm -rf .ruff_cache 2>/dev/null || true
      - echo "✅ Linting artifacts cleaned"

  # Information
  info:
    desc: Show information about available linting tools
    cmds:
      - echo "🛠️  Linting Tools Information:"
      - |
        echo "Python Tools:"
        if command -v ruff >/dev/null 2>&1; then
          echo "  ✅ Ruff: $(ruff --version)"
        else
          echo "  ❌ Ruff: Not installed"
        fi
        
        if command -v mypy >/dev/null 2>&1; then
          echo "  ✅ mypy: $(mypy --version)"
        else
          echo "  ❌ mypy: Not installed"
        fi
        
        if command -v pre-commit >/dev/null 2>&1; then
          echo "  ✅ pre-commit: $(pre-commit --version)"
        else
          echo "  ❌ pre-commit: Not installed"
        fi
        
        echo ""
        echo "JavaScript Tools:"
        if command -v npm >/dev/null 2>&1; then
          echo "  ✅ npm: $(npm --version)"
          if [ -f "package.json" ]; then
            echo "  📄 ESLint/Prettier configured in package.json"
          else
            echo "  ❌ package.json not found"
          fi
        else
          echo "  ❌ npm: Not installed"
        fi