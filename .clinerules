# Cline's Project Intelligence (.clinerules)

## Project: Medical Patients Data System

*This file captures important patterns, preferences, and project intelligence that help Cline work more effectively on this specific project. It's a living document that grows as the project evolves.*

### Core Project Direction (New Initiative - May 2025)

1.  **Enhanced Configurability Architecture:** The project is undergoing a major refactor to introduce a highly configurable system. This includes:
    *   **Database Backend:** Migrating from SQLite to **PostgreSQL** (clean install).
    *   **Schema Management:** Using **Alembic** for PostgreSQL database migrations.
    *   **Configuration Manager:** A new backend component to manage dynamic configurations for fronts, nationalities, medical flows, etc.
    *   **API Layer:** A comprehensive RESTful API for programmatic configuration and patient generation.
    *   **Expanded NATO Support:** Aiming to support all 32 NATO nations with detailed demographic data.
    *   **Phased Implementation:** Following a detailed multi-phase plan (Phase 0 to Phase 4) documented in `memory-bank/active-context.md`.

2.  **Git Workflow:** Adopting a structured Git branching model:
    *   `main`: Stable, production-ready code.
    *   `develop`: Integration branch for features.
    *   Feature branches: `feature/<epic-name>/<task-name>`.
    *   Release branches: `release/vX.Y.Z`.
    *   Hotfix branches: `hotfix/<issue-id>`.

### Initial Observations & Rules:

1.  **Memory Bank First:** Always read and update the Memory Bank files (`memory-bank/*.md`) at the start of a session and after significant changes. This is crucial for maintaining context, especially with the new architectural direction.
2.  **File Structure Awareness:** The project has a Python backend (`app.py`, `patient_generator/`) and a frontend. The frontend includes:
    *   A static HTML/JS application (`static/index.html`).
    *   An advanced visualization dashboard (`static/visualizations.html`) powered by a React/TSX component (`enhanced-visualization-dashboard.tsx`) which is compiled to `static/dist/bundle.js`. This part of the frontend uses Node.js, npm, `esbuild`, Jest, etc.
    *   A new React-based configuration panel will be added.
3.  **Python Focus:** The core data generation logic resides in Python modules. Pay attention to Python best practices, dependencies (`requirements.txt`), and packaging (`setup.py`). Backend APIs are built with FastAPI, interacting with PostgreSQL.
4.  **Iterative Documentation:** The Memory Bank files are comprehensive and must be updated iteratively as the project evolves.
5.  **User Interaction:** Consider how backend changes (especially new configurations and API) will affect both existing and new frontend experiences.
6.  **Patient Data Core:** The `patient_generator` module remains central but will be significantly refactored for configurability.

### Tool Usage Patterns:

*   **Database:** PostgreSQL is the new standard. Alembic for migrations (`alembic revision -m "..."`, `alembic upgrade head`).
*   **Docker Compose Command:** If `docker-compose` (hyphenated) results in a "command not found" error, use `docker compose` (with a space) instead. Docker Compose files will need updates for PostgreSQL.
*   **Frontend Testing:** Use `npm test` to run Jest tests for `.tsx` files. Configuration is in `jest.config.js`, `tsconfig.json`, and `setupTests.ts`.
*   **Frontend Build:**
    *   Individual components can be built with `npm run build:viz-dashboard`, `npm run build:config-panel`, `npm run build:military-dashboard`.
    *   All frontend assets can be built using `npm run build:all-frontend`. This is the recommended script to ensure all necessary JavaScript bundles (e.g., `static/dist/configuration-panel.js`, `static/dist/bundle.js`) are generated.
*   **Development Environment Startup:** Use the `./start-dev.sh` script to automate:
    *   `npm install` (Ensures frontend dependencies are present).
    *   `npm run build:all-frontend` (Builds all necessary frontend assets).
    *   `docker compose -f docker-compose.dev.yml up --build -d` (Starts Docker services in detached mode).
    *   A robust wait loop to ensure the `app` service (FastAPI backend) is "healthy" (using Docker healthcheck).
    *   Alembic database migrations (`docker compose -f docker-compose.dev.yml exec app alembic upgrade head`).
        *   Note: `alembic_migrations/env.py` is configured to use the `DATABASE_URL` env var from the `app` container, ensuring it connects to the `db` service correctly.
    This script is the recommended and most reliable way to start the development environment, preventing issues with service readiness for migrations.

### User Preferences & Workflow:

*   **Backend Server Restarts:** When changes are made to Python backend code (`app.py` or imported modules), the Uvicorn server (especially if running in Docker without live reload for Python, or if not using `--reload` flag locally) MUST be restarted for changes to take effect.
*   User manually verifies application behavior in the browser after changes.
*   Clean install for PostgreSQL (no data migration from SQLite).

### Known Challenges & Considerations (Many being addressed by new plan):

*   **Cross-Stack Debugging:** Still relevant.
*   **API Data Consistency:** Pydantic models in the new API will help.
*   **Python Type Errors:** Continued vigilance needed.
*   **JSDOM Limitations:** Still relevant for frontend tests.
*   **React Testing Library `act()` Warnings:** Monitor during new component development.
*   **Frontend Bundle Size:** A concern for existing and new React components (Phase 4 task).
*   **Memory Management (Backend):** Key focus of Phase 1 refactoring.
*   **Error Handling Standardization:** To be implemented throughout new development.
*   **Frontend Architecture Consolidation:** Phase 4 task.
*   **Configuration Management:** Core of the new architecture.
*   **Database Concerns:** Migrating to PostgreSQL and using Alembic addresses previous SQLite concerns (connection pooling, migrations). Parameterized queries remain essential.
*   **Docker Optimization:** Phase 4 task.
*   **Security - Encryption Salt:** Phase 4 task.
*   Maintaining consistency across all Memory Bank files.
*   Ensuring `.clinerules` accurately reflects the evolving project intelligence.
