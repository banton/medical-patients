version: '3'

# Medical Patients Generator - Simple Task Runner
# Only includes commands that actually work

env:
  COMPOSE_PROJECT_NAME: medical-patients
  PYTHONPATH: "{{.ROOT_DIR}}"

vars:
  PYTHON:
    sh: which python3 || which python

tasks:
  default:
    desc: Show available tasks
    silent: true
    cmds:
      - |
        echo "Medical Patients Generator - Task Runner"
        echo "========================================"
        echo ""
        echo "First time? Run: task init"
        echo ""
        echo "Main commands:"
        echo "  task dev        - Start dev mode (local Python + Docker DB)"
        echo "  task start      - Start all services in Docker"
        echo "  task status     - Show service status and errors"
        echo "  task stop       - Stop all services"
        echo "  task test       - Run all tests"
        echo "  task clean      - Clean up Docker resources"
        echo ""
        echo "Timeline viewer commands:"
        echo "  task timeline   - Start timeline viewer (foreground)"
        echo "  task timeline-start  - Start timeline viewer (background)"
        echo "  task timeline-stop   - Stop timeline viewer"
        echo "  task timeline-status - Check timeline viewer status"
        echo ""
        echo "Staging commands:"
        echo "  task staging:up     - Start staging environment"
        echo "  task staging:down   - Stop staging environment"
        echo "  task staging:logs   - View staging logs"
        echo "  task staging:status - Check staging status"
        echo ""
        echo "Run 'task --list' to see all tasks with descriptions"

  init:
    desc: First-time setup wizard for new users
    cmds:
      - ./scripts/init-setup.sh

  dev:
    desc: Start development environment with logs (database + app)
    deps: [check-init]
    cmds:
      - docker compose up -d db redis
      - sleep 5  # Wait for database to be ready
      - |
        # Check if we're in a virtual environment or if alembic is available
        if command -v alembic &> /dev/null; then
          echo "Running migrations with local alembic..."
          alembic upgrade head
        else
          echo "Running migrations with Docker..."
          docker compose run --rm app alembic upgrade head
        fi
      - |
        # Ensure we use the right Python
        if [ -n "$VIRTUAL_ENV" ]; then
          echo "Using virtual environment Python"
          python3 -m uvicorn src.main:app --reload --host 0.0.0.0 --port 8000
        else
          {{.PYTHON}} -m uvicorn src.main:app --reload --host 0.0.0.0 --port 8000
        fi

  check-init:
    desc: Check if initialization has been run
    silent: true
    cmds:
      - |
        if [ ! -f .env ] || ! docker network ls | grep -q medical-patients_default; then
          echo "⚠️  It looks like this is your first time running the project."
          echo "   Please run 'task init' first to set up your environment."
          exit 1
        fi
        
        # Check if running on Ubuntu without virtual environment
        if [ -f /etc/os-release ]; then
          . /etc/os-release
          if [[ "$ID" == "ubuntu" ]] && [[ "$VERSION_ID" == "24.04" ]] && [ -z "$VIRTUAL_ENV" ] && [ -d ".venv" ]; then
            echo "⚠️  Ubuntu 24.04 detected - virtual environment required"
            echo "   Please activate your virtual environment first:"
            echo "   source .venv/bin/activate"
            echo "   (or use: ./activate.sh if available)"
            exit 1
          fi
        fi

  start:
    desc: Start all services in background
    cmds:
      - docker compose up -d --build

  test:
    desc: Run all tests
    cmds:
      - "{{.PYTHON}} -m pytest"

  test-unit:
    desc: Run unit tests only
    cmds:
      - "{{.PYTHON}} -m pytest tests/unit -v"

  test-integration:
    desc: Run integration tests
    cmds:
      - "{{.PYTHON}} -m pytest tests/test_*.py -v --ignore=tests/unit"

  stop:
    desc: Stop all services
    cmds:
      - docker compose down

  status:
    desc: Show comprehensive status of all services including staging
    cmds:
      - ./status.sh

  staging:shell:
    desc: Open shell in staging container
    cmds:
      - docker exec -it medical-patients-staging /bin/bash

  clean:
    desc: Clean up Docker resources and Python cache
    cmds:
      - docker compose down -v
      - find . -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
      - find . -type f -name "*.pyc" -delete 2>/dev/null || true

  db-migrate:
    desc: Run database migrations
    cmds:
      - alembic upgrade head

  db-reset:
    desc: Reset database (WARNING - destroys all data)
    cmds:
      - docker compose down -v
      - docker compose up -d db
      - sleep 5
      - alembic upgrade head

  timeline:
    desc: Start React timeline viewer in foreground
    dir: patient-timeline-viewer
    cmds:
      - npm install
      - npm run dev

  timeline-start:
    desc: Start React timeline viewer in background
    dir: patient-timeline-viewer
    cmds:
      - npm install
      - |
        # Start in background using nohup
        nohup npm run dev > timeline.log 2>&1 &
        echo "Timeline viewer started in background"
        echo "Check logs: tail -f patient-timeline-viewer/timeline.log"
        echo "Access at: http://localhost:5174"

  timeline-stop:
    desc: Stop React timeline viewer
    cmds:
      - |
        # Find and kill the vite dev server
        if command -v lsof >/dev/null 2>&1; then
          PID=$(lsof -ti:5174 2>/dev/null)
          if [ -n "$PID" ]; then
            kill $PID
            echo "Timeline viewer stopped"
          else
            echo "Timeline viewer is not running"
          fi
        else
          # Fallback for systems without lsof
          pkill -f "vite.*5174" || echo "Timeline viewer is not running"
        fi

  timeline-status:
    desc: Check timeline viewer status
    cmds:
      - |
        echo "Timeline Viewer Status"
        echo "====================="
        if command -v lsof >/dev/null 2>&1; then
          PID=$(lsof -ti:5174 2>/dev/null)
          if [ -n "$PID" ]; then
            echo "✅ Running on http://localhost:5174 (PID: $PID)"
          else
            echo "❌ Not running"
          fi
        else
          # Fallback check using curl
          if curl -s http://localhost:5174 >/dev/null 2>&1; then
            echo "✅ Running on http://localhost:5174"
          else
            echo "❌ Not running"
          fi
        fi
        
        if [ -f patient-timeline-viewer/timeline.log ]; then
          echo ""
          echo "Recent logs:"
          tail -5 patient-timeline-viewer/timeline.log 2>/dev/null || echo "No logs available"
        fi

  # Staging environment tasks
  staging:up:
    desc: Start staging environment on port 8001
    cmds:
      - |
        if [ ! -f .env.staging ]; then
          echo "Error: .env.staging file not found!"
          echo "Create it with:"
          echo "  STAGING_DB_PASSWORD=your-password"
          echo "  STAGING_API_KEY=$(openssl rand -hex 32)"
          echo "  STAGING_SECRET_KEY=$(openssl rand -hex 16)"
          exit 1
        fi
      - docker compose -f docker-compose.staging.yml up -d
      - echo "Staging API starting at http://localhost:8001"
      - echo "Timeline viewer at http://localhost:3001"
      - echo 'Check status with task staging:status'

  staging:down:
    desc: Stop staging environment
    cmds:
      - docker compose -f docker-compose.staging.yml down
      - echo "Staging environment stopped"

  staging:logs:
    desc: View staging logs (follow mode)
    cmds:
      - docker compose -f docker-compose.staging.yml logs -f

  staging:status:
    desc: Check staging environment status
    cmds:
      - |
        echo "=== Staging Environment Status ==="
        echo ""
        echo "Containers:"
        docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" | grep -E "(staging|timeline)" || echo "No staging containers running"
        echo ""
        echo "API Health:"
        if curl -s http://localhost:8001/api/v1/health >/dev/null 2>&1; then
          curl -s http://localhost:8001/api/v1/health | jq -C '.' || echo "Staging API responding but JSON parse failed"
        else
          echo "[ERROR] Staging API not responding on port 8001"
        fi
        echo ""
        echo "Recent Logs:"
        docker logs medical-patients-staging --tail 10 2>&1 || echo "No logs available"

  staging:rebuild:
    desc: Rebuild and restart staging environment
    cmds:
      - docker compose -f docker-compose.staging.yml down
      - docker compose -f docker-compose.staging.yml build --no-cache
      - docker compose -f docker-compose.staging.yml up -d
      - echo "Staging environment rebuilt and restarted"

  # Timeline Viewer Deployment Tasks
  timeline:deploy:
    desc: Deploy timeline viewer to viewer.milmed.tech
    cmds:
      - ./scripts/deploy-timeline-viewer.sh

  timeline:build:
    desc: Build timeline viewer for production
    dir: patient-timeline-viewer
    cmds:
      - npm ci
      - npm run build
      - echo "Build complete in patient-timeline-viewer/dist/"

  timeline:preview:
    desc: Preview production build locally
    dir: patient-timeline-viewer
    cmds:
      - npm run preview