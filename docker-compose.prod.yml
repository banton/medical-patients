services:
  app: # Renamed from web
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    volumes:
      - output_data:/app/output
    environment:
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONUNBUFFERED=1
      - PORT=8000
      - HOST=0.0.0.0
      - PATIENT_GENERATOR_THREADS=4 # This might be superseded by uvicorn workers, or used by background tasks
      - PATIENT_GENERATOR_MAX_MEMORY=4096
      - DATABASE_URL=postgresql://medgen_user:medgen_password@db:5432/medgen_db
      - DB_TYPE=postgres
      - REDIS_URL=redis://redis:6379/0
      - CACHE_TTL=${CACHE_TTL:-3600}
      - CACHE_ENABLED=${CACHE_ENABLED:-True}
      - API_KEY=${API_KEY:-your_secret_api_key_here}
      - DEBUG=${DEBUG:-False}
      - CORS_ORIGINS=${CORS_ORIGINS:-}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s # Increased start_period
    restart: always
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 8G
        reservations:
          cpus: '2'
          memory: 4G
    command: >
      uvicorn src.main:app --host 0.0.0.0
      --port 8000
      --workers 4
      --proxy-headers

  db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_USER=medgen_user
      - POSTGRES_PASSWORD=medgen_password # In production, use Docker secrets or an .env file not committed
      - POSTGRES_DB=medgen_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
    # ports: # Typically not exposed to host in prod unless specifically needed for external access
      # - "5432:5432" 
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U medgen_user -d medgen_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: "unless-stopped"
    deploy: # Added basic deploy resources for DB consistency
      resources:
        limits:
          memory: 2G # Example limit
        reservations:
          memory: 1G # Example reservation

  redis:
    image: redis:7-alpine
    # ports: # Not exposed in production unless needed for monitoring
      # - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: "unless-stopped"
    command: redis-server --appendonly yes
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

volumes:
  output_data:
    driver: local
  postgres_data:
    driver: local # Explicitly defining driver, good practice
  redis_data:
    driver: local
