name: CI

on:
  push:
    branches: [main, develop, feature/*]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.10"
  NODE_VERSION: "18"

jobs:
  lint:
    name: Lint and Format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ruff mypy types-requests

      - name: Install Node dependencies
        run: |
          npm ci
          cd patient-timeline-viewer && npm ci

      - name: Run Python linting
        run: |
          ruff check src/ patient_generator/
          mypy src/ patient_generator/ --ignore-missing-imports

      - name: Build timeline viewer
        run: |
          cd patient-timeline-viewer && npm run build

      - name: Run JavaScript linting
        run: |
          npm run lint:check
          npm run format:check

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: lint
    services:
      postgres:
        image: postgres:14-alpine
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_pass
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest-cov
          npm ci
          cd patient-timeline-viewer && npm ci

      - name: Build timeline viewer
        run: |
          cd patient-timeline-viewer && npm run build

      - name: Run migrations
        env:
          DATABASE_URL: postgresql://test_user:test_pass@localhost:5432/test_db
        run: |
          alembic upgrade head

      - name: Run unit tests
        env:
          DATABASE_URL: postgresql://test_user:test_pass@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379/0
        run: |
          pytest tests/ -v -m "not integration and not e2e" --cov=src --cov=patient_generator --cov-report=xml

      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  test-integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          npm ci
          cd patient-timeline-viewer && npm ci

      - name: Start services
        run: |
          docker compose up -d db redis
          sleep 10

      - name: Run migrations
        env:
          DATABASE_URL: postgresql://medgen_user:medgen_password@localhost:5432/medgen_db
        run: |
          alembic upgrade head

      - name: Start application server
        env:
          DATABASE_URL: postgresql://medgen_user:medgen_password@localhost:5432/medgen_db
          REDIS_URL: redis://localhost:6379/0
          API_KEY: DEMO_MILMED_2025_50_PATIENTS
        run: |
          PYTHONPATH=. python src/main.py &
          sleep 10
          # Wait for server to be ready
          for i in {1..30}; do
            if curl -f http://localhost:8000/health 2>/dev/null; then
              echo "Server is ready!"
              break
            fi
            echo "Waiting for server... ($i/30)"
            sleep 1
          done
          curl -f http://localhost:8000/health || exit 1

      - name: Run integration tests
        env:
          DATABASE_URL: postgresql://medgen_user:medgen_password@localhost:5432/medgen_db
          REDIS_URL: redis://localhost:6379/0
          API_KEY: DEMO_MILMED_2025_50_PATIENTS
        run: |
          ./run_tests.sh integration

      - name: Stop services
        if: always()
        run: docker compose down

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [test, test-integration]
    if: github.event_name != 'pull_request'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: Install Node dependencies
        run: |
          npm ci
          cd patient-timeline-viewer && npm ci

      - name: Build timeline viewer
        run: |
          cd patient-timeline-viewer && npm run build

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image (test only)
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: false
          tags: medical-patients:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: npm

      - name: Install Node dependencies
        run: |
          npm ci
          cd patient-timeline-viewer && npm ci

      - name: Build timeline viewer for scanning
        run: |
          cd patient-timeline-viewer && npm run build

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: fs
          scan-ref: .
          format: sarif
          output: trivy-results.sarif
          severity: CRITICAL,HIGH
          exit-code: '0'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        continue-on-error: true
        with:
          sarif_file: trivy-results.sarif
          
      - name: Display Trivy results
        if: always()
        run: |
          echo "Trivy scan completed. Results:"
          if [ -f trivy-results.sarif ]; then
            cat trivy-results.sarif | jq '.runs[0].results | length' || echo "No vulnerabilities found"
          else
            echo "No results file found"
          fi

