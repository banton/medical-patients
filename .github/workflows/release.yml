name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write
  packages: write

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version
        id: version
        run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Generate changelog
        id: changelog
        run: |
          # Generate changelog from commits since last tag
          git log $(git describe --tags --abbrev=0 HEAD^)..HEAD --pretty=format:"- %s" > CHANGELOG.md
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          cat CHANGELOG.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ steps.version.outputs.version }}
          body: |
            ## Changes in this Release
            ${{ steps.changelog.outputs.changelog }}

            ## Docker Images
            - `ghcr.io/${{ github.repository }}:${{ steps.version.outputs.version }}`
            - `ghcr.io/${{ github.repository }}:latest`

            ## Installation
            ```bash
            docker pull ghcr.io/${{ github.repository }}:${{ steps.version.outputs.version }}
            ```
          draft: false
          prerelease: ${{ contains(github.ref, '-') }}

  build-artifacts:
    name: Build Release Artifacts
    runs-on: ubuntu-latest
    needs: create-release
    strategy:
      matrix:
        include:
          - os: linux
            arch: amd64
          - os: linux
            arch: arm64
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Build standalone executable
        run: |
          pyinstaller --onefile \
            --name military-patient-generator-${{ matrix.os }}-${{ matrix.arch }} \
            --add-data "patient_generator:patient_generator" \
            --add-data "static:static" \
            --add-data "alembic:alembic" \
            --hidden-import uvicorn.logging \
            --hidden-import uvicorn.loops \
            --hidden-import uvicorn.protocols \
            --hidden-import uvicorn.protocols.http \
            --hidden-import uvicorn.protocols.websockets \
            --hidden-import uvicorn.lifespan \
            --hidden-import uvicorn.lifespan.on \
            src/main.py

      - name: Create tarball
        run: |
          tar -czf military-patient-generator-${{ matrix.os }}-${{ matrix.arch }}.tar.gz \
            dist/military-patient-generator-${{ matrix.os }}-${{ matrix.arch }} \
            README.md \
            LICENSE \
            docker-compose.yml \
            .env.example

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./military-patient-generator-${{ matrix.os }}-${{ matrix.arch }}.tar.gz
          asset_name: military-patient-generator-${{ matrix.os }}-${{ matrix.arch }}.tar.gz
          asset_content_type: application/gzip

  publish-docs:
    name: Publish Documentation
    runs-on: ubuntu-latest
    needs: create-release
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"

      - name: Install documentation dependencies
        run: |
          pip install mkdocs mkdocs-material mkdocstrings[python] mkdocs-mermaid2-plugin

      - name: Build documentation
        run: |
          # Create mkdocs.yml if it doesn't exist
          if [ ! -f mkdocs.yml ]; then
            cat > mkdocs.yml << EOF
          site_name: Military Medical Patient Generator
          site_description: Documentation for the Military Medical Exercise Patient Generator
          repo_url: https://github.com/${{ github.repository }}
          theme:
            name: material
            palette:
              primary: indigo
              accent: indigo
          plugins:
            - search
            - mkdocstrings
            - mermaid2
          nav:
            - Home: README.md
            - Getting Started: GETTING_STARTED.md
            - Installation: INSTALL.md
            - Architecture: ARCHITECTURE.md
            - API Reference: api.md
            - Configuration: ENVIRONMENT_CONFIG.md
            - Docker Deployment: DOCKER_DEPLOYMENT.md
            - Migration Guide: MIGRATION_GUIDE.md
          EOF
          fi
          mkdocs build

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./site
          cname: military-patient-gen.example.com