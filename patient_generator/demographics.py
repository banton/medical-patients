import datetime  # Added import
import json
import os  # Added import for path joining
import random


class DemographicsGenerator:
    """Generates realistic demographics based on nationality"""

    def __init__(self):
        # Determine the path to the JSON file relative to this script
        base_dir = os.path.dirname(os.path.abspath(__file__))
        json_path = os.path.join(base_dir, "demographics.json")

        try:
            with open(json_path, encoding="utf-8") as f:
                self.demographic_data = json.load(f).get("NATO_NATIONS", {})
        except FileNotFoundError:
            print(f"Error: demographics.json not found at {json_path}")
            self.demographic_data = {}
        except json.JSONDecodeError:
            print(f"Error: Could not decode JSON from {json_path}")
            self.demographic_data = {}

        # Initialize data sources for different nationalities
        self._init_name_data()
        self._init_id_formats()

    def _init_name_data(self):
        """Initialize name data for different nationalities from loaded JSON"""
        self.first_names = {}
        self.last_names = {}
        for nation_code, data in self.demographic_data.items():
            if "first_names" in data and isinstance(data["first_names"], dict):
                self.first_names[nation_code] = data["first_names"]
            if "last_names" in data and isinstance(data["last_names"], list):
                self.last_names[nation_code] = data["last_names"]

    def _init_id_formats(self):
        """Initialize ID number formats (regex strings) for different nationalities from loaded JSON"""
        self.id_formats = {}
        for nation_code, data in self.demographic_data.items():
            if "id_format" in data and isinstance(data["id_format"], str):
                self.id_formats[nation_code] = data["id_format"]
            # The id_generator (JS function string) is not directly used by this Python class for generation
            # It's available in self.demographic_data[nation_code]["id_generator"] if needed elsewhere

    def generate_person(self, nationality, gender=None):
        """Generate a complete person profile for the given nationality"""
        # If gender not specified, choose randomly
        if gender is None:
            gender = random.choice(["male", "female"])

        # Default to USA if nationality not found or data missing
        if (
            nationality not in self.first_names
            or nationality not in self.last_names
            or gender not in self.first_names.get(nationality, {})
        ):
            # Try to find a fallback with the required gender
            fallback_nationality = "USA"  # Default fallback
            if (
                fallback_nationality not in self.first_names
                or fallback_nationality not in self.last_names
                or gender not in self.first_names.get(fallback_nationality, {})
            ):
                # If USA also doesn't work, find any valid nation/gender
                found_fallback = False
                for nat_code, nat_data in self.first_names.items():
                    if gender in nat_data and nat_code in self.last_names:
                        fallback_nationality = nat_code
                        found_fallback = True
                        break
                if not found_fallback:  # Absolute last resort, pick any gender from any nation
                    for nat_code, nat_data in self.first_names.items():
                        if nat_code in self.last_names:
                            available_genders = list(nat_data.keys())
                            if available_genders:
                                gender = random.choice(available_genders)
                                fallback_nationality = nat_code
                                found_fallback = True
                                break
                if not found_fallback:
                    # This should ideally not happen if demographics.json is populated
                    return {
                        "family_name": "Undefined",
                        "given_name": "Undefined",
                        "gender": gender,
                        "id_number": None,
                        "birthdate": "1900-01-01",
                        "nationality": "UND",
                        "religion": None,
                        "weight": 0,
                        "blood_type": "O",
                    }
            nationality = fallback_nationality

        # Generate first and last name
        first_name = random.choice(self.first_names[nationality][gender])
        last_name = random.choice(self.last_names[nationality])

        # ID number is no longer generated by this class.
        # The format regex is available in self.id_formats.get(nationality)
        # The JS generator function string is in self.demographic_data[nationality].get("id_generator")
        id_number = None

        # Generate birthdate (between 18-50 years old)
        years_ago = random.randint(18, 50)
        days_variation = random.randint(-180, 180)
        birthdate_dt = datetime.datetime.now() - datetime.timedelta(days=365.25 * years_ago + days_variation)
        birthdate = birthdate_dt.strftime("%Y-%m-%d")

        # Generate religion (optional)
        religions = [
            "1013",  # Roman Catholic
            "1025",  # Lutheran
            "1026",  # Protestant
            "1049",  # Anglican
            "1051",  # Baptist
            "1068",  # Orthodox
            "1077",  # Methodist
            None,  # No religion
            None,  # No religion (weighted to be more common)
        ]
        religion = random.choice(religions)

        # Generate random weight based on gender (more realistic distribution)
        if gender == "male":
            weight = round(random.normalvariate(80, 12), 1)  # Male: mean 80kg, SD 12kg
        else:
            weight = round(random.normalvariate(65, 10), 1)  # Female: mean 65kg, SD 10kg

        # Generate blood type
        blood_type = random.choice(["A", "B", "AB", "O"])

        return {
            "family_name": last_name,
            "given_name": first_name,
            "gender": gender,
            "id_number": id_number,  # Will be None
            "birthdate": birthdate,
            "nationality": nationality,
            "religion": religion,
            "weight": weight,
            "blood_type": blood_type,
        }
