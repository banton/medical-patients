services:
  web:
    build: 
      context: .
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    volumes:
      - output_data:/app/output
    environment:
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONUNBUFFERED=1
      - PORT=8000
      - HOST=0.0.0.0
      - PATIENT_GENERATOR_THREADS=8
      - PATIENT_GENERATOR_MAX_MEMORY=8192
      - DATABASE_URL=postgresql://medgen_user:medgen_password@db:5432/medgen_db
      - DB_TYPE=postgres
      - REDIS_URL=redis://redis:6379/0
      - CACHE_TTL=${CACHE_TTL:-3600}
      - CACHE_ENABLED=${CACHE_ENABLED:-True}
      - API_KEY=${API_KEY:-your_secret_api_key_here}
      - DEBUG=${DEBUG:-False}
      - CORS_ORIGINS=${CORS_ORIGINS:-}
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s
    restart: always
    deploy:
      mode: replicated
      replicas: 3
      resources:
        limits:
          cpus: '8'
          memory: 16G
        reservations:
          cpus: '4'
          memory: 8G
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
    command: >
      uvicorn src.main:app --host 0.0.0.0 
      --port 8000 
      --workers 8 
      --proxy-headers

  load-balancer:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/certs:/etc/nginx/certs
    depends_on:
      - web
    restart: always

  db:
    image: postgres:15-alpine
    environment:
      - POSTGRES_USER=medgen_user
      - POSTGRES_PASSWORD=medgen_password
      - POSTGRES_DB=medgen_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U medgen_user -d medgen_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: "unless-stopped"
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          memory: 2G

  redis:
    image: redis:7-alpine
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: "unless-stopped"
    command: redis-server --appendonly yes
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G

volumes:
  output_data:
    driver: local
  postgres_data:
    driver: local
  redis_data:
    driver: local
