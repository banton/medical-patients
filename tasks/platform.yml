version: '3'

# Platform Optimization Module
# Cross-platform compatibility tools and testing

vars:
  PLATFORM:
    sh: uname -s 2>/dev/null || echo "Windows"
  ARCH:
    sh: uname -m 2>/dev/null || echo "unknown"

tasks:
  # Platform detection and information
  info:
    desc: Display detailed platform information
    cmds:
      - echo "🖥️  Platform Information"
      - echo "======================"
      - |
        case "{{.PLATFORM}}" in
          Darwin)
            echo "Platform: macOS ({{.ARCH}})"
            if system_profiler SPSoftwareDataType 2>/dev/null | grep -q "Apple Silicon"; then
              echo "Processor: Apple Silicon"
            else
              echo "Processor: Intel"
            fi
            sw_vers 2>/dev/null || echo "Version: Unknown"
            ;;
          Linux)
            echo "Platform: Linux ({{.ARCH}})"
            if [ -f /etc/os-release ]; then
              . /etc/os-release
              echo "Distribution: $NAME $VERSION"
            else
              echo "Distribution: Unknown"
            fi
            ;;
          MINGW*|CYGWIN*|MSYS*)
            echo "Platform: Windows ({{.ARCH}})"
            echo "Environment: $(uname -s)"
            ;;
          *)
            echo "Platform: {{.PLATFORM}} ({{.ARCH}})"
            ;;
        esac
      - echo " "
      - echo "🔧 Development Tools"
      - task: check-tools

  check:
    desc: Check platform compatibility and requirements
    aliases: [test]
    cmds:
      - echo "🧪 Platform Compatibility Check"
      - echo "==============================="
      - task: info
      - echo " "
      - echo "🔍 Running compatibility tests"
      - |
        case "{{.PLATFORM}}" in
          Darwin|Linux)
            if [ -x "./scripts/test-platform.sh" ]; then
              ./scripts/test-platform.sh
            else
              echo "❌ Platform test script not found or not executable"
              exit 1
            fi
            ;;
          MINGW*|CYGWIN*|MSYS*|Windows*)
            if [ -f "./scripts/test-platform.ps1" ]; then
              powershell -ExecutionPolicy Bypass -File "./scripts/test-platform.ps1"
            else
              echo "❌ Windows platform test script not found"
              exit 1
            fi
            ;;
          *)
            echo "⚠️  Unsupported platform for automated testing"
            echo "Please run tests manually using the checklist in PLATFORM-SUPPORT.md"
            ;;
        esac

  check-tools:
    desc: Check availability of required development tools
    silent: true
    cmds:
      - |
        echo "Checking development tools..."
        
        # Check Task runner
        if command -v task >/dev/null 2>&1; then
          echo "  ✅ Task runner found"
        else
          echo "  ❌ Task runner not found"
        fi
        
        # Check Python
        if command -v python3 >/dev/null 2>&1; then
          echo "  ✅ Python 3 found"
        elif command -v python >/dev/null 2>&1; then
          echo "  ✅ Python found"
        else
          echo "  ❌ Python not found"
        fi
        
        # Check Docker
        if command -v docker >/dev/null 2>&1; then
          echo "  ✅ Docker found"
        else
          echo "  ❌ Docker not found"
        fi
        
        # Check Node.js
        if command -v node >/dev/null 2>&1; then
          echo "  ✅ Node.js found"
        else
          echo "  ⚠️  Node.js not found"
        fi

  optimize:
    desc: Optimize platform-specific configurations
    cmds:
      - echo "🔧 Platform-Specific Optimizations"
      - echo "=================================="
      - task: optimize-{{.PLATFORM}}

  optimize-Darwin:
    desc: macOS-specific optimizations
    cmds:
      - echo "🍎 Applying macOS optimizations..."
      - |
        # Check for Apple Silicon optimizations
        if system_profiler SPSoftwareDataType 2>/dev/null | grep -q "Apple Silicon"; then
          echo "  ✅ Apple Silicon detected - Docker should use native builds"
          echo "  💡 Consider using 'DOCKER_DEFAULT_PLATFORM=linux/arm64' for better performance"
        else
          echo "  ℹ️  Intel Mac detected - using standard x86_64 configurations"
        fi
      - |
        # Check Homebrew installation
        if command -v brew >/dev/null 2>&1; then
          echo "  ✅ Homebrew available for package management"
        else
          echo "  💡 Consider installing Homebrew for easier tool management"
          echo "     /bin/bash -c \"\$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\""
        fi
      - echo "  ✅ macOS optimizations complete"

  optimize-Linux:
    desc: Linux-specific optimizations
    cmds:
      - echo "🐧 Applying Linux optimizations..."
      - |
        # Detect package manager
        if command -v apt-get >/dev/null 2>&1; then
          echo "  ✅ APT package manager detected (Debian/Ubuntu)"
          PM="apt-get"
        elif command -v yum >/dev/null 2>&1; then
          echo "  ✅ YUM package manager detected (RHEL/CentOS)"
          PM="yum"
        elif command -v dnf >/dev/null 2>&1; then
          echo "  ✅ DNF package manager detected (Fedora)"
          PM="dnf"
        elif command -v pacman >/dev/null 2>&1; then
          echo "  ✅ Pacman package manager detected (Arch)"
          PM="pacman"
        else
          echo "  ⚠️  Unknown package manager - manual installation required"
          PM="unknown"
        fi
      - |
        # Check Docker permissions
        if command -v docker >/dev/null 2>&1; then
          if docker info >/dev/null 2>&1; then
            echo "  ✅ Docker permissions configured correctly"
          else
            echo "  💡 Consider adding user to docker group:"
            echo "     sudo usermod -aG docker \$USER"
            echo "     newgrp docker"
          fi
        fi
      - echo "  ✅ Linux optimizations complete"

  optimize-Windows:
    desc: Windows-specific optimizations (placeholder)
    cmds:
      - echo "🪟 Windows optimizations would be applied here"
      - echo "  💡 Use PowerShell script for Windows-specific optimizations"
      - echo "  💡 Ensure WSL2 is installed for best Docker experience"

  # Installation helpers
  install-task:
    desc: Install Task runner on current platform
    cmds:
      - echo "📦 Installing Task runner..."
      - |
        case "{{.PLATFORM}}" in
          Darwin)
            if command -v brew >/dev/null 2>&1; then
              brew install go-task/tap/go-task
            else
              echo "Installing via shell script..."
              curl -sL https://taskfile.dev/install.sh | sh
            fi
            ;;
          Linux)
            echo "Installing via shell script..."
            curl -sL https://taskfile.dev/install.sh | sh
            ;;
          *)
            echo "Please install Task manually from: https://taskfile.dev/installation/"
            echo "Windows: winget install Task.Task"
            ;;
        esac

  install-docker:
    desc: Show Docker installation instructions for current platform
    cmds:
      - echo "🐳 Docker Installation Instructions"
      - echo "==================================="
      - |
        case "{{.PLATFORM}}" in
          Darwin)
            echo "macOS Docker Installation:"
            echo "1. Download Docker Desktop for Mac from:"
            echo "   https://docs.docker.com/desktop/install/mac-install/"
            echo "2. Install the .dmg file"
            echo "3. Start Docker Desktop"
            echo ""
            echo "Alternative (via Homebrew):"
            echo "   brew install --cask docker"
            ;;
          Linux)
            echo "Linux Docker Installation:"
            echo "1. Install Docker Engine:"
            echo "   curl -fsSL https://get.docker.com -o get-docker.sh"
            echo "   sudo sh get-docker.sh"
            echo "2. Add user to docker group:"
            echo "   sudo usermod -aG docker \$USER"
            echo "   newgrp docker"
            echo "3. Start Docker service:"
            echo "   sudo systemctl start docker"
            echo "   sudo systemctl enable docker"
            ;;
          *)
            echo "Windows Docker Installation:"
            echo "1. Install WSL2:"
            echo "   wsl --install"
            echo "2. Download Docker Desktop for Windows:"
            echo "   https://docs.docker.com/desktop/install/windows-install/"
            echo "3. Enable WSL2 integration in Docker Desktop settings"
            ;;
        esac

  # Testing shortcuts
  test-quick:
    desc: Run quick platform compatibility tests
    cmds:
      - echo "⚡ Quick Platform Test"
      - task: check-tools
      - echo ""
      - echo "🧪 Testing core commands..."
      - task --version
      - task --list >/dev/null && echo "  ✅ Task commands accessible"

  test-docker:
    desc: Test Docker integration specifically
    cmds:
      - echo "🐳 Docker Integration Test"
      - echo "========================="
      - task: :docker:check
      - task: :docker:status
      - echo "💡 Run 'task docker:services' to test full Docker integration"

  test-timeline:
    desc: Test timeline viewer specifically
    cmds:
      - echo "📈 Timeline Viewer Test"
      - echo "======================"
      - task: :timeline:status
      - |
        if [ -d "patient-timeline-viewer/node_modules" ]; then
          echo "✅ Dependencies already installed"
        else
          echo "📦 Installing timeline viewer dependencies..."
          task timeline:install
        fi
      - task: :timeline:build
      - echo "✅ Timeline viewer test complete"

  # Performance benchmarking
  benchmark:
    desc: Run platform performance benchmarks
    cmds:
      - echo "🏃 Platform Performance Benchmark"
      - echo "================================="
      - echo "Testing Task command performance..."
      - |
        start_time=$(date +%s%N 2>/dev/null || date +%s)
        task --list-all >/dev/null
        end_time=$(date +%s%N 2>/dev/null || date +%s)
        
        if [ "$start_time" != "$end_time" ]; then
          duration=$((end_time - start_time))
          if command -v bc >/dev/null 2>&1; then
            duration_ms=$(echo "scale=2; $duration / 1000000" | bc)
            echo "  Task list performance: ${duration_ms}ms"
          else
            echo "  Task list performance: ~${duration}ns"
          fi
        else
          echo "  Task list performance: <1s"
        fi
      - |
        echo "Testing Python detection..."
        start_time=$(date +%s%N 2>/dev/null || date +%s)
        python_cmd=""
        for cmd in python3 python py; do
          if command -v $cmd >/dev/null 2>&1; then
            python_cmd=$cmd
            break
          fi
        done
        end_time=$(date +%s%N 2>/dev/null || date +%s)
        echo "  Python detection: $python_cmd"

  # Documentation generation
  generate-support-info:
    desc: Generate platform support information for documentation
    cmds:
      - echo "📋 Generating Platform Support Information"
      - echo "=========================================="
      - echo " "
      - echo "## Platform {{.PLATFORM}} {{.ARCH}}"
      - echo " "
      - echo "### System Information:"
      - task: info
      - echo " "
      - echo "### Tool Availability"
      - task: check-tools
      - echo " "
      - echo "### Quick Test Results"
      - task: test-quick
      - echo " "
      - echo "Generated on $(date)"

  # Report generation and management
  generate-report:
    desc: Generate comprehensive platform compatibility report
    cmds:
      - echo "📋 Generating Platform Compatibility Report"
      - echo "=========================================="
      - |
        case "{{.PLATFORM}}" in
          Darwin|Linux)
            if [ -x "./scripts/test-platform.sh" ]; then
              echo "Running full compatibility test..."
              ./scripts/test-platform.sh
            else
              echo "❌ Platform test script not found"
              echo "Please run from project root directory"
              exit 1
            fi
            ;;
          MINGW*|CYGWIN*|MSYS*|Windows*)
            if [ -f "./scripts/test-platform.ps1" ]; then
              echo "Running Windows compatibility test..."
              powershell -ExecutionPolicy Bypass -File "./scripts/test-platform.ps1"
            else
              echo "❌ Windows test script not found"
              echo "Please run from project root directory"
              exit 1
            fi
            ;;
          *)
            echo "⚠️  No automated test available for platform: {{.PLATFORM}}"
            echo "Please use manual testing checklist in PLATFORM-SUPPORT.md"
            ;;
        esac

  list-reports:
    desc: List all generated platform test reports
    cmds:
      - echo "📋 Generated Platform Test Reports"
      - echo "=================================="
      - |
        if ls platform-test-report-*.md 1> /dev/null 2>&1; then
          echo "Found reports:"
          for report in platform-test-report-*.md; do
            if [ -f "$report" ]; then
              echo "  📄 $report"
              echo "     Size: $(wc -l < "$report") lines"
              echo "     Date: $(stat -f "%Sm" "$report" 2>/dev/null || stat -c "%y" "$report" 2>/dev/null || echo "unknown")"
              echo ""
            fi
          done
          echo "💡 Send any of these reports to the development team"
        else
          echo "No reports found."
          echo "Run 'task platform:generate-report' to create a report"
        fi

  clean-reports:
    desc: Clean up old platform test reports
    cmds:
      - echo "🧹 Cleaning Platform Test Reports"
      - echo "================================="
      - |
        if ls platform-test-report-*.md 1> /dev/null 2>&1; then
          echo "Removing old reports..."
          rm -f platform-test-report-*.md
          echo "✅ Reports cleaned"
        else
          echo "No reports to clean"
        fi

  send-report-help:
    desc: Show instructions for sending reports to development team
    cmds:
      - echo "📧 How to Send Platform Test Reports"
      - echo "===================================="
      - echo ""
      - echo "1️⃣  **Generate a report** (if you haven't already):"
      - echo "   task platform:generate-report"
      - echo ""
      - echo "2️⃣  **Find your report file**:"
      - echo "   task platform:list-reports"
      - echo ""
      - echo "3️⃣  **Send via email**:"
      - echo "   • Attach the .md report file to your email"
      - echo "   • Include any additional error messages you saw"
      - echo "   • Subject - Platform Test Your Platform Name"
      - echo ""
      - echo "4️⃣  **Alternative methods**:"
      - echo "   • Copy report content and paste in email/chat"
      - echo "   • Share via GitHub issue if applicable"
      - echo "   • Include in team communication channel"
      - echo ""
      - echo "📋 **Report contains**:"
      - echo "   • Complete test results with pass/fail for each test"
      - echo "   • System information (OS, architecture, versions)"
      - echo "   • Tool availability and versions"
      - echo "   • Platform-specific recommendations"
      - echo "   • Troubleshooting guidance"
      - echo ""
      - echo "✅ **What happens next**:"
      - echo "   • Development team reviews your report"
      - echo "   • Any issues are identified and solutions provided"
      - echo "   • Platform-specific fixes or workarounds shared"
      - echo "   • Follow-up testing guidance if needed"